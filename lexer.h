#ifndef __AXION_LEXER_H__
#define __AXION_LEXER_H__

char*   prog;
int     tok;
char    buf[0xFFFF];

enum token_e {
    TOKEN_EOF,
    TOKEN_ENDFILE,
    TOKEN_ENDCOMMAND,

    TOKEN_CONST_FLT,
    TOKEN_CONST_INT,
    TOKEN_CONST_CHR,
    TOKEN_CONST_STR,

    TOKEN_TYPE_I8,
    TOKEN_TYPE_I16,
    TOKEN_TYPE_I32,
    TOKEN_TYPE_I64,
    TOKEN_TYPE_U8,
    TOKEN_TYPE_U16,
    TOKEN_TYPE_U32,
    TOKEN_TYPE_U64,
    TOKEN_TYPE_F8,
    TOKEN_TYPE_F16,
    TOKEN_TYPE_F32,
    TOKEN_TYPE_F64,
    TOKEN_TYPE_CHR,
    TOKEN_TYPE_STR,
    TOKEN_TYPE_CLS,
    TOKEN_TYPE_FNC,

    TOKEN_COMMAND_EXTERN,
    TOKEN_COMMAND_IF,
    TOKEN_COMMAND_ELIF,
    TOKEN_COMMAND_ELSE,
    TOKEN_COMMAND_WHILE,
    TOKEN_COMMAND_FOR,

    TOKEN_VAR,

    TOKEN_LPAR,
    TOKEN_RPAR,

    TOKEN_LSQB,
    TOKEN_RSQB,

    TOKEN_LCBR,
    TOKEN_RCBR,

    TOKEN_OPERATOR_ADD,
    TOKEN_OPERATOR_SUB,
    TOKEN_OPERATOR_MUL,
    TOKEN_OPERATOR_DIV,

    TOKEN_OPERATOR_INC,
    TOKEN_OPERATOR_DEC,

    TOKEN_LOGIC_OPERATOR_AND,
    TOKEN_LOGIC_OPERATOR_OR,
    TOKEN_LOGIC_OPERATOR_XOR,
    TOKEN_LOGIC_OPERATOR_NOT,

    TOKEN_BIT_OPERATOR_AND,
    TOKEN_BIT_OPERATOR_OR,
    TOKEN_BIT_OPERATOR_XOR,
    TOKEN_BIT_OPERATOR_NOT,
    TOKEN_BIT_OPERATOR_LS,
    TOKEN_BIT_OPERATOR_RS,

    TOKEN_LOGIC_OPERATOR_LT,
    TOKEN_LOGIC_OPERATOR_GT,
    TOKEN_LOGIC_OPERATOR_LTET,
    TOKEN_LOGIC_OPERATOR_GTET,
    TOKEN_LOGIC_OPERATOR_EQUALITY,
    TOKEN_LOGIC_OPERATOR_NOT_EQUAL
};

int get_token();

void put_back();

#endif